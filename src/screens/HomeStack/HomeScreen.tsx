import React, { useEffect, useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Image,
  TouchableOpacity,
  TextInput,
  ScrollView,
  FlatList,
  ActivityIndicator,
} from 'react-native';
import { ICONS } from '../../utils/constants';
import { Spacing } from '../../utils/spacing';
import AppStyles from '../../components/AppStyle';
import { Colors } from '../../utils/color';
import { Fonts } from '../../utils/fontSize';
import ImageCard from './ImageCard';
import { getAllPosts } from '../../service';
import { useDispatch, useSelector } from 'react-redux';
import { logout } from '../../store/reducers/userSlice';
import AppButton from '../../components/AppButton';
import { setLoading } from '../../store/reducers/loadingSlice';
import FilterManager from '../../components/FilterManager';
import SearchModal from '../../components/Modal/SearchModal';
import { menu } from '../../service/menu';
import LanguageSelector from '../../components/LanguageSelector';

const dataFilter = [
  { label: 'Lo·∫°i nh√† ƒë·∫•t', key: 'loaiNha' },
  { label: 'Kho·∫£ng gi√°', key: 'khoangGia' },
  { label: 'Di·ªán t√≠ch', key: 'dienTich' },
  { label: 'S·ªë ph√≤ng ng·ªß', key: 'soPhongNgu' },
  // 'H∆∞·ªõng nh√†',
  // 'H∆∞·ªõng ban c√¥ng',
  // 'Tin c√≥ ·∫£nh / video',
];
const placeholderTexts = [
  'T√¨m d·ª± √°n',
  'T√¨m qu·∫≠n/huy·ªán',
  'T√¨m ph∆∞·ªùng/x√£',
  'T√¨m ƒë∆∞·ªùng ph·ªë',
];

type PostType = {
  _id: string;
  // add other properties as needed
  [key: string]: any;
};

const HomeScreen: React.FC = ({}) => {
  const dispatch = useDispatch();
  const { userData, token } = useSelector((state: any) => state.user);

  const [postData, setPostsData] = useState<PostType[]>([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [modalType, setModalType] = useState<
    'checkBoxModal' | 'radioButtonModal' | null
  >(null);

  const [modalTitleKey, setModalTitleKey] = useState<string>('');
  const [modalData, setModalData] = useState<any[]>([]);
  const [modalTitle, setModalTitle] = useState<string>('');
  const [modalVisible, setModalVisible] = useState(false);
  const [searchModalVisible, setSearchModalVisible] = useState(false);
  const [selectedValue, setSelectedValue] = useState<Record<string, any>>({});
  const [loading, setLoading] = useState(false);
  const [isSingleValue, setIsSingleValue] = useState(false);
  const [filteredData, setFilteredData] = useState<PostType[]>([]);
  const [seachValue, setSearchValue] = useState('');
  const [houseType, setHouseType] = useState([]);
  const numberResults = filteredData.length.toString();
  const [langModalVisible, setLangModalVisible] = useState(false);
  const [selectedLang, setSelectedLang] = useState('vi');

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentIndex(prev => (prev + 1) % placeholderTexts.length);
    }, 1000); // ƒë·ªïi text m·ªói 1s

    return () => clearInterval(interval); // clear khi unmount
  }, []);

  useEffect(() => {
    const loadNews = async () => {
      setLoading(true);
      try {
        const data = await getAllPosts(); // G·ªçi API b√†i vi·∫øt
        console.log('data', data);

        setPostsData(data.metadata.docs);
      } catch (error) {
        console.log('L·ªói khi t·∫£i b√†i vi·∫øt:', error);
      } finally {
        setLoading(false);
      }
    };
    loadNews();
  }, []);

  useEffect(() => {
    const applyFilters = () => {
      let filtered = [...postData];

      // L·ªçc theo lo·∫°i nh√†
      if (selectedValue.loaiNha?.length) {
        console.log('loai nha', selectedValue.loaiNha);
        console.log(
          ' data loai nha',
          filtered.filter(post =>
            selectedValue.loaiNha.includes(post.info_main.type_property),
          ),
        );

        filtered = filtered.filter(post =>
          selectedValue.loaiNha.includes(post.info_main.type_property),
        );
      }

      // L·ªçc theo kho·∫£ng gi√° (gi√° trong post.price, t√≠nh theo t·ª∑)
      if (selectedValue.khoangGia) {
        const [min, max] = selectedValue.khoangGia
          .split('-')
          .map(val => Number(val) * 1_000_000_000);
        console.log(min, ' min   ; ', max, '  max');

        filtered = filtered.filter(
          post => post.info_main.price >= min && post.info_main.price <= max,
        );
      }

      // L·ªçc theo di·ªán t√≠ch (di·ªán t√≠ch trong post.acreage, ƒë∆°n v·ªã m¬≤)
      if (selectedValue.dienTich) {
        const [min, max] = selectedValue.dienTich.split('-').map(Number);
        console.log('dien tich', min, max);

        filtered = filtered.filter(
          post =>
            post.info_main.acreage >= min && post.info_main.acreage <= max,
        );
      }

      // L·ªçc theo s·ªë ph√≤ng ng·ªß (post.bedrooms l√† s·ªë)
      if (selectedValue.soPhongNgu) {
        const val = parseInt(selectedValue.soPhongNgu);

        if (!isNaN(val)) {
          if (val < 5) {
            filtered = filtered.filter(
              post => post.info_other.bedrooms === val,
            );
          } else {
            filtered = filtered.filter(post => post.info_other.bedrooms >= val);
          }
        }
      }

      setFilteredData(filtered);
    };

    applyFilters();
  }, [selectedValue, postData]);

  useEffect(() => {
    const loadMenu = async () => {
      const data = await menu(selectedLang);
      setHouseType(data.forSale);
    };
    loadMenu();
  }, [selectedLang]);

  useEffect(() => {
    console.log('‚úÖ houseType updated:', houseType);
  }, [houseType]);

  const openFilterModal = (type: string) => {
    setModalTitleKey(type);
    switch (type) {
      case 'loaiNha':
        setModalType('checkBoxModal');
        setModalData([
          'Chung c∆∞',
          'Nh√† ri√™ng',
          'Bi·ªát th·ª±',
          'CƒÉn h·ªô chung c∆∞',
          'Nh√† bi·ªát th·ª±, li·ªÅn k·ªÅ',
          'Nh√† m·∫∑t ph·ªë',
          'Nh√† tr·ªç, ph√≤ng tr·ªç',
          'Shophouse, nh√† ph·ªë th∆∞∆°ng m·∫°i',
          'VƒÉn ph√≤ng',
          'C·ª≠a h√†ng, kiot',
          'Kho, nh√† x∆∞·ªüng, ƒë·∫•t',
          'B·∫•t ƒë·ªông s·∫£n kh√°c',
        ]);
        setModalTitle('Ch·ªçn lo·∫°i nh√†');
        break;
      case 'huongNha':
        setModalType('checkBoxModal');
        setModalData([
          'ƒê√¥ng',
          'T√¢y',
          'Nam',
          'B·∫Øc',
          'ƒê√¥ng B·∫Øc',
          'ƒê√¥ng Nam',
          'T√¢y B·∫Øc',
          'T√¢y Nam',
        ]);
        setModalTitle('Ch·ªçn h∆∞·ªõng nh√†');
        break;
      case 'khoangGia':
        setModalType('radioButtonModal');
        setModalData([
          { label: 'D∆∞·ªõi 500 tri·ªáu', value: '0-0.5' },
          { label: '500 - 800 tri·ªáu', value: '0.5-0.8' },
          { label: '800 tri·ªáu - 1 t·ª∑', value: '0.8-1' },
          { label: '1 - 2 t·ª∑', value: '1-2' },
          { label: '2 - 3 t·ª∑', value: '2-3' },
          { label: '3 - 5 t·ª∑', value: '3-5' },
          { label: '5 - 7 t·ª∑', value: '5-7' },
          { label: '7 - 10 t·ª∑', value: '7-10' },
          { label: '10 - 20 t·ª∑', value: '10-20' },
          { label: '20 - 30 t·ª∑', value: '20-30' },
          { label: '30 - 40 t·ª∑', value: '30-40' },
          { label: '40 - 60 t·ª∑', value: '40-60' },
          { label: 'tr√™n 60 t·ª∑', value: '60-100' },
        ]);
        setModalTitle('Ch·ªçn kho·∫£ng gi√°');
        break;
      case 'dienTich':
        setModalType('radioButtonModal');
        setModalData([
          { label: 'D∆∞·ªõi 30m¬≤', value: '0-30' },
          { label: '30-50m¬≤', value: '30-50' },
          { label: '50-80m¬≤', value: '50-80' },
          { label: '80-100m¬≤', value: '80-100' },
          { label: '100-150m¬≤', value: '100-150' },
          { label: '150-200m¬≤', value: '150-200' },
          { label: '200-250m¬≤', value: '200-250' },
          { label: '250-300m¬≤', value: '250-300' },
          { label: '300-500m¬≤', value: '300-500' },
          { label: '500-800m¬≤', value: '500-800' },
          { label: 'tr√™n 800m¬≤', value: '800-999999999999' },
        ]);
        setModalTitle('Ch·ªçn di·ªán t√≠ch');
        break;
      case 'soPhongNgu':
        setModalType('radioButtonModal');
        setModalData([
          { label: '1', value: '1' },
          { label: '2', value: '2' },
          { label: '3', value: '3' },
          { label: '4', value: '4' },
          { label: '5+', value: '5' },
        ]);
        setModalTitle('Ch·ªçn s·ªë ph√≤ng ng·ªß');
        setIsSingleValue(true); // ‚úÖ th√™m bi·∫øn flag

        break;
    }
    setModalVisible(true);
  };

  const renderPost = ({ item }: { item: PostType }) => {
    return (
      <>
        <ImageCard post={item} />
        <View style={styles.underLine} />
      </>
    );
  };
  const handleReset = () => {
    setSelectedValue(prev => {
      const updated = { ...prev };
      delete updated[modalTitleKey]; // Xo√° gi√° tr·ªã filter hi·ªán t·∫°i
      return updated;
    });
    setModalVisible(false);
  };
  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <View style={styles.searchBox}>
          <Image source={ICONS.search} style={styles.searchIcon} />
          <TouchableOpacity
            onPress={() => setSearchModalVisible(true)}
            style={{ width: '100%' }}
          >
            <Text style={[styles.searchLabel]}>T√¨m ki·∫øm</Text>
            <Text style={[AppStyles.text]}>
              {placeholderTexts[currentIndex]}
            </Text>
          </TouchableOpacity>
        </View>

        {/* üîΩ B·ªô l·ªçc */}
        <View>
          <ScrollView
            horizontal
            showsHorizontalScrollIndicator={false}
            style={styles.filterRow}
          >
            {dataFilter.map((item, index) => {
              const selected = selectedValue[item.key];

              let label = item.label;
              if (selected) {
                if (Array.isArray(selected)) {
                  label = `${selected.join(', ')}`;
                } else {
                  if (item.key === 'khoangGia') {
                    label = `${selected} t·ª∑`;
                  } else if (item.key === 'dienTich') {
                    {
                      label = `${selected} m¬≤`;
                    }
                  } else if (item.key === 'soPhongNgu') {
                    {
                      label = `${selected} ng·ªß`;
                    }
                  }
                }
              }

              return (
                <TouchableOpacity
                  key={index}
                  style={styles.filterInput}
                  onPress={() => openFilterModal(item.key)}
                >
                  <Text
                    style={[AppStyles.text, { flexShrink: 1 }]}
                    numberOfLines={1}
                    ellipsizeMode="tail"
                  >
                    {label}
                  </Text>
                  <Image source={ICONS.down} style={AppStyles.icon} />
                </TouchableOpacity>
              );
            })}
          </ScrollView>
        </View>
      </View>
      <View style={styles.body}>
        <View
          style={{
            flexDirection: 'row',
            justifyContent: 'space-between',
            alignItems: 'center',
            marginBottom: Spacing.xxlarge,
            paddingHorizontal: Spacing.medium,
          }}
        >
          <TouchableOpacity
            style={{ padding: 10, alignSelf: 'flex-end' }}
            onPress={() => setLangModalVisible(true)}
          >
            <Text style={{ color: Colors.primary }}>üåê Ng√¥n ng·ªØ</Text>
          </TouchableOpacity>
          <View style={{ flexDirection: 'row' }}>
            <Text
              style={[
                AppStyles.text,
                { color: Colors.darkGray, fontWeight: 'bold' },
              ]}
            >
              {numberResults}
            </Text>
            <Text style={[AppStyles.text, { color: Colors.darkGray }]}>
              {` b·∫•t ƒë·ªông s·∫£n`}
            </Text>
          </View>
          <TouchableOpacity
            style={{
              borderColor: Colors.Gray,
              borderWidth: 1,
              borderRadius: 20,
              paddingVertical: Spacing.small,
              paddingHorizontal: Spacing.medium,
              flexDirection: 'row',
              alignItems: 'center',
            }}
          >
            <Text style={AppStyles.text}>S·∫Øp x·∫øp</Text>
            <Image
              source={ICONS.sort_down}
              style={{ width: 20, height: 20, marginLeft: Spacing.small }}
            />
          </TouchableOpacity>
        </View>
        <FlatList
          data={filteredData}
          ListEmptyComponent={
            <Text style={[AppStyles.label, { flex: 1, textAlign: 'center' }]}>
              Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p
            </Text>
          }
          keyExtractor={item => item._id}
          // renderItem={({ item }) => <ImageCard post={item} />}
          renderItem={renderPost}
        />
      </View>
      {/* <AppButton title="Logout" onPress={() => handleLogout()}></AppButton> */}
      {loading && (
        <View
          style={{
            ...StyleSheet.absoluteFillObject,
            backgroundColor: 'rgba(0,0,0,0.3)',
            justifyContent: 'center',
            alignItems: 'center',
            zIndex: 10,
          }}
        >
          <ActivityIndicator size="large" color="#E53935" />
        </View>
      )}
      {modalType && (
        <FilterManager
          visible={modalVisible}
          type={modalType}
          title={modalTitle}
          data={modalData}
          isSingleValue={isSingleValue} // ‚úÖ Th√™m d√≤ng n√†y
          selected={selectedValue[modalTitleKey] || ''} // ‚úÖ fix ƒë√∫ng ki·ªÉu
          onClose={() => setModalVisible(false)}
          onReset={() => handleReset()}
          onApplyFilter={value => {
            setSelectedValue(prev => ({
              ...prev,
              [modalTitleKey]: value,
            }));
            setModalVisible(false);
          }}
        />
      )}
      <LanguageSelector
        visible={langModalVisible}
        selectedLang={selectedLang}
        onSelect={lang => {
          setSelectedLang(lang);
        }}
        onClose={() => setLangModalVisible(false)}
      />
      <SearchModal
        visible={searchModalVisible}
        onClose={() => setSearchModalVisible(false)}
        onSearch={value => setSearchValue(value)}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    paddingTop: 70,
  },
  header: {
    flex: 0.2,
    paddingHorizontal: Spacing.medium,
  },
  body: {
    flex: 1,
    backgroundColor: Colors.white,
    paddingTop: Spacing.medium,
  },
  searchBox: {
    flexDirection: 'row',
    alignItems: 'center',
    borderRadius: 30,
    paddingVertical: Spacing.small,
    paddingHorizontal: Spacing.medium,
    marginBottom: 16,
    backgroundColor: Colors.white,
  },
  searchIcon: {
    width: 40,
    height: 40,
    tintColor: '#000',
    marginHorizontal: Spacing.small,
    marginRight: 12,
  },
  searchLabel: {
    fontSize: Fonts.normal,
    fontWeight: 'bold',
    color: '#000',
  },
  searchPlaceholder: {
    fontSize: Fonts.normal,
    color: '#888',
  },
  itemCard: { borderBottomColor: Colors.Gray, borderBottomWidth: 2 },
  filterRow: {
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
  filterInput: {
    flexDirection: 'row',
    backgroundColor: Colors.white,
    alignItems: 'center',
    borderRadius: 20,
    paddingHorizontal: 14,
    paddingVertical: Spacing.small,
    marginRight: Spacing.small,
    marginBottom: Spacing.small,
    maxWidth: 300,
  },
  filterText: {
    fontSize: 14,
    color: '#333',
  },
  underLine: {
    borderWidth: 1,
    borderColor: Colors.Gray,
    marginVertical: Spacing.medium,
    width: '100%',
  },
});

export default HomeScreen;
